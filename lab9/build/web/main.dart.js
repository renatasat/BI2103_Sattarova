// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk'], (function load__zapp_user_main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var Machine = Object.create(dart.library);
  var CoffeeTypes = Object.create(dart.library);
  var UserInterface = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    LinkedMapOfCoffeeType$ListOfint: () => (T.LinkedMapOfCoffeeType$ListOfint = dart.constFn(_js_helper.LinkedMap$(CoffeeTypes.CoffeeType, T.ListOfint())))(),
    LinkedMapOfCoffeeType$String: () => (T.LinkedMapOfCoffeeType$String = dart.constFn(_js_helper.LinkedMap$(CoffeeTypes.CoffeeType, core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: CoffeeTypes.CoffeeType.prototype,
        [_Enum__name]: "espr",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: CoffeeTypes.CoffeeType.prototype,
        [_Enum__name]: "cap",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: CoffeeTypes.CoffeeType.prototype,
        [_Enum__name]: "lat",
        [_Enum_index]: 2
      });
    },
    get C4() {
      return C[4] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], CoffeeTypes.CoffeeType);
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///zapp/project/lib/classes/Machine.dart",
    "file:///zapp/project/lib/classes/CoffeeTypes.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    let coffeeMachine = new Machine.Machine.new(500, 500, 1000, 0);
    UserInterface.orderCoffee(coffeeMachine, CoffeeTypes.CoffeeType.espr);
    UserInterface.orderCoffee(coffeeMachine, CoffeeTypes.CoffeeType.cap);
    UserInterface.orderCoffee(coffeeMachine, CoffeeTypes.CoffeeType.lat);
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var _coffeeBeans$ = dart.privateName(Machine, "_coffeeBeans");
  var _milk$ = dart.privateName(Machine, "_milk");
  var _water$ = dart.privateName(Machine, "_water");
  var _cash$ = dart.privateName(Machine, "_cash");
  var _subtractResources = dart.privateName(Machine, "_subtractResources");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  Machine.Machine = class Machine$ extends core.Object {
    static ['_#new#tearOff'](_coffeeBeans, _milk, _water, _cash) {
      return new Machine.Machine.new(_coffeeBeans, _milk, _water, _cash);
    }
    get coffeeBeans() {
      return this[_coffeeBeans$];
    }
    set coffeeBeans(value) {
      return this[_coffeeBeans$] = value;
    }
    get milk() {
      return this[_milk$];
    }
    set milk(value) {
      return this[_milk$] = value;
    }
    get water() {
      return this[_water$];
    }
    set water(value) {
      return this[_water$] = value;
    }
    get cash() {
      return this[_cash$];
    }
    set cash(value) {
      return this[_cash$] = value;
    }
    isAvailable(beansRequired, milkRequired, waterRequired) {
      return this[_coffeeBeans$] >= beansRequired && this[_milk$] >= milkRequired && this[_water$] >= waterRequired;
    }
    [_subtractResources](beansRequired, milkRequired, waterRequired) {
      this[_coffeeBeans$] = this[_coffeeBeans$] - beansRequired;
      this[_milk$] = this[_milk$] - milkRequired;
      this[_water$] = this[_water$] - waterRequired;
    }
    makingCoffee(type) {
      let resources = dart.nullCheck(CoffeeTypes.coffeeResources[$_get](type));
      let typeName = dart.nullCheck(CoffeeTypes.coffeeTypeToName[$_get](type));
      if (this.isAvailable(resources[$_get](0), resources[$_get](1), resources[$_get](2))) {
        this[_subtractResources](resources[$_get](0), resources[$_get](1), resources[$_get](2));
        this[_cash$] = this[_cash$] + this.getPrice(type);
        core.print(typeName + " готов!");
      } else {
        core.print("Недостаточно ресурсов.");
      }
    }
    getPrice(type) {
      switch (type) {
        case C[1] || CT.C1:
          {
            return 100;
          }
        case C[2] || CT.C2:
          {
            return 150;
          }
        case C[3] || CT.C3:
          {
            return 200;
          }
        default:
          {
            return 0;
          }
      }
    }
  };
  (Machine.Machine.new = function(_coffeeBeans, _milk, _water, _cash) {
    this[_coffeeBeans$] = _coffeeBeans;
    this[_milk$] = _milk;
    this[_water$] = _water;
    this[_cash$] = _cash;
    ;
  }).prototype = Machine.Machine.prototype;
  dart.addTypeTests(Machine.Machine);
  dart.addTypeCaches(Machine.Machine);
  dart.setMethodSignature(Machine.Machine, () => ({
    __proto__: dart.getMethods(Machine.Machine.__proto__),
    isAvailable: dart.fnType(core.bool, [core.int, core.int, core.int]),
    [_subtractResources]: dart.fnType(dart.void, [core.int, core.int, core.int]),
    makingCoffee: dart.fnType(dart.void, [CoffeeTypes.CoffeeType]),
    getPrice: dart.fnType(core.int, [CoffeeTypes.CoffeeType])
  }));
  dart.setGetterSignature(Machine.Machine, () => ({
    __proto__: dart.getGetters(Machine.Machine.__proto__),
    coffeeBeans: core.int,
    milk: core.int,
    water: core.int,
    cash: core.int
  }));
  dart.setSetterSignature(Machine.Machine, () => ({
    __proto__: dart.getSetters(Machine.Machine.__proto__),
    coffeeBeans: core.int,
    milk: core.int,
    water: core.int,
    cash: core.int
  }));
  dart.setLibraryUri(Machine.Machine, I[0]);
  dart.setFieldSignature(Machine.Machine, () => ({
    __proto__: dart.getFields(Machine.Machine.__proto__),
    [_coffeeBeans$]: dart.fieldType(core.int),
    [_milk$]: dart.fieldType(core.int),
    [_water$]: dart.fieldType(core.int),
    [_cash$]: dart.fieldType(core.int)
  }));
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  CoffeeTypes.CoffeeType = class CoffeeType extends core._Enum {
    [_enumToString]() {
      return "CoffeeType." + this[_name];
    }
  };
  (CoffeeTypes.CoffeeType.new = function(index, name) {
    CoffeeTypes.CoffeeType.__proto__.new.call(this, index, name);
    ;
  }).prototype = CoffeeTypes.CoffeeType.prototype;
  dart.addTypeTests(CoffeeTypes.CoffeeType);
  dart.addTypeCaches(CoffeeTypes.CoffeeType);
  dart.setMethodSignature(CoffeeTypes.CoffeeType, () => ({
    __proto__: dart.getMethods(CoffeeTypes.CoffeeType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(CoffeeTypes.CoffeeType, I[1]);
  dart.setStaticFieldSignature(CoffeeTypes.CoffeeType, () => ['values', 'espr', 'cap', 'lat']);
  dart.defineLazy(CoffeeTypes.CoffeeType, {
    /*CoffeeTypes.CoffeeType.values*/get values() {
      return C[4] || CT.C4;
    },
    /*CoffeeTypes.CoffeeType.espr*/get espr() {
      return C[1] || CT.C1;
    },
    /*CoffeeTypes.CoffeeType.cap*/get cap() {
      return C[2] || CT.C2;
    },
    /*CoffeeTypes.CoffeeType.lat*/get lat() {
      return C[3] || CT.C3;
    }
  }, false);
  dart.defineLazy(CoffeeTypes, {
    /*CoffeeTypes.coffeeResources*/get coffeeResources() {
      return new (T.LinkedMapOfCoffeeType$ListOfint()).from([CoffeeTypes.CoffeeType.espr, T.JSArrayOfint().of([50, 0, 100]), CoffeeTypes.CoffeeType.cap, T.JSArrayOfint().of([50, 50, 100]), CoffeeTypes.CoffeeType.lat, T.JSArrayOfint().of([50, 100, 150])]);
    },
    set coffeeResources(value) {},
    /*CoffeeTypes.coffeeTypeToName*/get coffeeTypeToName() {
      return new (T.LinkedMapOfCoffeeType$String()).from([CoffeeTypes.CoffeeType.espr, "Эспрессо", CoffeeTypes.CoffeeType.cap, "Капучино", CoffeeTypes.CoffeeType.lat, "Латте"]);
    },
    set coffeeTypeToName(value) {}
  }, false);
  UserInterface.orderCoffee = function orderCoffee(machine, type) {
    let resources = dart.nullCheck(CoffeeTypes.coffeeResources[$_get](type));
    if (machine.isAvailable(resources[$_get](0), resources[$_get](1), resources[$_get](2))) {
      machine.makingCoffee(type);
    } else {
      core.print("Недостаточно ресурсов для приготовления " + dart.str(CoffeeTypes.coffeeTypeToName[$_get](type)) + ".");
    }
  };
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/classes/Machine.dart": Machine,
    "file:///zapp/project/lib/classes/CoffeeTypes.dart": CoffeeTypes,
    "file:///zapp/project/lib/classes/UserInterface.dart": UserInterface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/classes/Machine.dart","/zapp/project/lib/classes/CoffeeTypes.dart","/zapp/project/lib/classes/UserInterface.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;AACmB,UAAjB;;IAGvB;;;AClDU,wBAAgB,wBAAQ,KAAK,KAAK,MAAM;AAEL,IAA3C,0BAAY,aAAa,EAAa;AACI,IAA1C,0BAAY,aAAa,EAAa;AACI,IAA1C,0BAAY,aAAa,EAAa;EACxC;;ECHwB;;;;;;;;;;;;;ACGC;IAAY;oBACf;AAAU,mCAAe,KAAK;;;AAElC;IAAK;aACR;AAAU,4BAAQ,KAAK;;;AAEnB;IAAM;cACT;AAAU,6BAAS,KAAK;;;AAEtB;IAAK;aACR;AAAU,4BAAQ,KAAK;;gBAEf,eAAmB,cAAkB;AACxD,YAAO,AAAa,AACM,wBADH,aAAa,IAChC,AAAM,gBAAG,YAAY,IACrB,AAAO,iBAAG,aAAa;IAC7B;yBAE4B,eAAmB,cAAkB;AAClC,MAA7B,sBAAA,AAAa,sBAAG,aAAa;AACR,MAArB,eAAA,AAAM,eAAG,YAAY;AACE,MAAvB,gBAAA,AAAO,gBAAG,aAAa;IACzB;iBAE6B;AACjB,sBAAiC,eAArB,AAAe,mCAAC,IAAI;AACnC,qBAAiC,eAAtB,AAAgB,oCAAC,IAAI;AAEvC,UAAI,iBAAY,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC;AACQ,QAA5D,yBAAmB,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC;AAClC,QAAvB,eAAA,AAAM,eAAG,cAAS,IAAI;AACG,QAAzB,WAAQ,AAAgB,QAAR;;AAEe,QAA/B,WAAM;;IAEV;aAEwB;AACtB,cAAQ,IAAI;;;AAER,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;IAEb;;kCAlDa,cAAmB,OAAY,QAAa;IAA5C;IAAmB;IAAY;IAAa;;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICRhC;;;;;;;;;;;;;;;MAA5B,6BAAM;;;MAAO,2BAAI;;;MAAE,0BAAG;;;MAAE,0BAAG;;;;;MAEL,2BAAe;YAAG,iDAChC,6BAAM,qBAAC,IAAI,GAAG,OACd,4BAAK,qBAAC,IAAI,IAAI,OACd,4BAAK,qBAAC,IAAI,KAAK;;;MAGJ,4BAAgB;YAAG,8CAC9B,6BAAM,YACN,4BAAK,YACL,4BAAK;;;;mDCRO,SAAoB;AACjC,oBAAiC,eAArB,AAAe,mCAAC,IAAI;AAE1C,QAAI,AAAQ,OAAD,aAAa,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC;AAClC,MAA1B,AAAQ,OAAD,cAAc,IAAI;;AAEkD,MAA3E,WAAM,AAAoE,sDAAzB,AAAgB,oCAAC,IAAI,KAAE;;EAE5E","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__classes__Machine: Machine,
    zapp__project__lib__classes__CoffeeTypes: CoffeeTypes,
    zapp__project__lib__classes__UserInterface: UserInterface
  };
}));

//# sourceMappingURL=main.js.map
